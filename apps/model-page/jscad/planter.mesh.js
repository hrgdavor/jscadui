var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.planter.mesh.js
var index_planter_mesh_exports = {};
__export(index_planter_mesh_exports, {
  main: () => main
});
module.exports = __toCommonJS(index_planter_mesh_exports);
var import_modeling3 = __toESM(require("@jscad/modeling"), 1);

// utils/src/loop.js
var loop = (counts, callback) => {
  if (typeof counts === "number")
    counts = [counts];
  const counters = counts.map((x) => 0);
  const topLevel = counts.length - 1;
  const ret = [];
  const loopRec = (level) => {
    let counti = counts[level];
    let starti = 0;
    if (counti < 0) {
      starti = Math.ceil(counti / 2);
      counti *= -1;
      if (counti % 2 === 0)
        starti += 0.5;
    }
    let stopi = starti + counti;
    for (let i = starti; i < stopi; i += 1) {
      counters[level] = i;
      if (level === topLevel)
        ret.push(callback(...counters, ...counts));
      else {
        loopRec(level + 1);
      }
    }
  };
  loopRec(0);
  return ret;
};

// utils/src/bottomUtils.js
var import_modeling2 = __toESM(require("@jscad/modeling"), 1);

// utils/src/utils.js
var import_modeling = __toESM(require("@jscad/modeling"), 1);
var { rotate } = import_modeling.default.transforms;
function rotateD(angles, ...parts) {
  return rotate(angles.map(toRad), ...parts);
}
function toRad(d) {
  return d / 180 * Math.PI;
}

// utils/src/bottomUtils.js
var { cuboid, cylinderElliptic, polyhedron } = import_modeling2.default.primitives;
var { translate: translate2 } = import_modeling2.default.transforms;
function bottomCube(options) {
  let { wall = 0, topWall = 0, bottomWall = 0, open } = options;
  let walls = { T: topWall, B: bottomWall, N: wall, S: wall, E: wall, W: wall };
  if (options.walls)
    walls = { ...walls, ...options.walls };
  if (options.sizeIn) {
    let [x, y, z] = options.sizeIn;
    options.size = [x + walls.W + walls.E, y + walls.S + walls.N, z + walls.B + walls.T];
  }
  options.center = dirAlign(options.align || "T", options.size, [0, 0, options.bottom || 0]);
  let piece = cuboid(options);
  if (wall || options.walls) {
    options.size[0] -= walls.W + walls.E;
    options.size[1] -= walls.N + walls.S;
    options.size[2] -= walls.T + walls.B;
    options.center[0] += (walls.W - walls.E) / 2;
    options.center[1] += (walls.S - walls.N) / 2;
    options.center[2] += (walls.B - walls.T) / 2;
    piece = subtract(piece, cuboid(options));
  }
  if (options.holes)
    piece = subtract(piece, translate2(options.center, ...options.holes));
  return dirRotateMove(options, piece)[0];
}
function dirAlign(align = "T", size = [1, 1, 1], center2 = [0, 0, 0]) {
  if (!align)
    return;
  for (let i = 0; i < align.length; i++) {
    let dir = align[i];
    if (dir == "T")
      center2[2] += size[2] / 2;
    if (dir == "B")
      center2[2] -= size[2] / 2;
    if (dir == "S")
      center2[1] -= size[1] / 2;
    if (dir == "N")
      center2[1] += size[1] / 2;
    if (dir == "E")
      center2[0] += size[0] / 2;
    if (dir == "W")
      center2[0] -= size[0] / 2;
  }
  return center2;
}
function dirRotateMove(options, ...elems) {
  let dirs = options.dir || "";
  let rot = [0, 0, 0];
  for (let i = 0; i < dirs.length; i++) {
    let dir = dirs[i];
    if (dir == "B")
      rot = [180, 0, 0];
    if (dir == "S")
      rot = [90, 0, 0];
    if (dir == "N")
      rot = [-90, 0, 0];
    if (dir == "E")
      rot = [0, 90, 0];
    if (dir == "W")
      rot = [0, -90, 0];
    if (dir == "Y")
      rot[1] += 90;
    if (dir == "y")
      rot[1] -= 90;
    if (dir == "X")
      rot[0] += 90;
    if (dir == "x")
      rot[0] -= 90;
    if (dir == "Z")
      rot[2] += 90;
    if (dir == "z")
      rot[2] -= 90;
  }
  elems = [rotateD(rot, ...elems)];
  if (options.tx || options.ty || options.tz)
    elems = [translate2([options.tx || 0, options.ty || 0, options.tz || 0], ...elems)];
  return elems;
}

// index.planter.mesh.js
var { sphere, cube } = import_modeling3.default.primitives;
var { translate: translate3 } = import_modeling3.default.transforms;
var main = ({
  // @jscad-params
  rows = 1, // {type:'slider', live:1, min:1, max:20}
  cols = 1, // {type:'slider', live:1, min:1, max:20}
  h1 = 1, // {type:'slider', live:1, step:0.1, min:0.1, max:5}
  h2 = 3 // {type:'slider', live:1, step:0.1, min:0.1, max:10}
}) => {
  const cube1 = bottomCube({ size: [2, 2, h2], align: "TNE" });
  const cube2 = bottomCube({ size: [2, 8, h1], align: "TNE" });
  const cube3 = bottomCube({ size: [8, 2, h1], align: "TNE" });
  let out = [];
  out.push(...loop([rows + 1, cols + 1], (i, j) => translate3([i * 10, j * 10, 0], cube1)));
  out.push(...loop([rows + 1, cols], (i, j) => translate3([i * 10, j * 10 + 2, 0], cube2)));
  out.push(...loop([rows, cols + 1], (i, j) => translate3([i * 10 + 2, j * 10, 0], cube3)));
  out.push(...loop([rows, cols - 1], (i, j) => bottomCube({ size: [2, 8, 1], tx: i * 10, ty: j * 10 + 2, align: "TNE" })));
  out.push(...loop([rows - 1, cols], (i, j) => bottomCube({ size: [8, 2, 1], tx: i * 10 + 2, ty: j * 10, align: "TNE" })));
  return out;
};
//# sourceMappingURL=data:application/json;base64,
